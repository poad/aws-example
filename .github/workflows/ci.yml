# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  pull_request_target:

  workflow_dispatch:

permissions:
  actions: read
  checks: write
  contents: write
  deployments: none
  id-token: write
  issues: none
  packages: none
  pull-requests: write
  repository-projects: read
  security-events: write
  statuses: write

jobs:
  configure:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - name: Pull request auto merge enabler
      if: github.event_name == 'pull_request'
      uses: poad/github-pull-request-auto-merge-enable-action@v1.0.1
      continue-on-error: true
      with:
        pull_request_id: ${{ github.event.pull_request.node_id }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository: ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: SQUASH      

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
        target: [
          ./codebuild/custom-image-test,
          ./lambda/cognito-console,
          ./lambda/container/simple,
          ./lambda/container/hello-rust-lambda,
          ./lambda/python,
          ./cognito/tiny-device-flow,
          ./cognito/tiny-device-flow/pages,
          ./cognito/cognito-saml-next-js/webapp,
          ./cognito/cognito-saml-next-js/infra,
          ./cognito/cognito-admin/app,
          ./cognito/cognito-admin/infra
        ]

    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.0.0
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm i -g yarn aws-cdk typescript
    - name: build
      env:
        BASE_PATH: /oauth/device/activate
      run: |
        cd ${{ matrix.target }} && \
        yarn install && \
        yarn build

  build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [14.x, 16.x]
        target: [
          { paths: [ ./lambda/layer/layer, ./lambda/layer/functions/function ] },
        ]
    steps:
    - name: generate timestamp
      id: gen-timestamp
      run: echo "::set-output name=timestamp::$(date +%Y%m%d-%H%M%S)"

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: us-west-2

    - name: checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.0.0
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup node modules
      run: npm -g i npm && npm -g i yarn && yarn global add aws-cdk

    - name: cdk deploy (${{ matrix.target.paths[0] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[0] }}
      run: |
        yarn install && \
        cdk deploy -c timestamp=${TIMESTAMP} --require-approval never

    - name: cdk deploy (${{ matrix.target.paths[1] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[1] }}
      run: |
        yarn install && \
        cdk deploy -c timestamp=${TIMESTAMP} --require-approval never

    - name: Awaiting completion of creation (function)
      id: create-await-fn
      env:
        FUNCTION_STACK: loose-linkage-lambda-layer-function-${{ steps.gen-timestamp.outputs.timestamp }}
      uses: ./.github/actions/cfn-await
      with:
          stack-name: ${FUNCTION_STACK}
    
    - name: check status (function)
      run: if [ ! ${{ steps.create-await-fn.outputs.stack-status }} = 'CREATE_COMPLETE' ]; then exit 1; fi

    - name: Awaiting completion of creation (layer)
      id: create-await-layer
      env:
        LAYER_STACK: loose-linkage-lambda-layer-${{ steps.gen-timestamp.outputs.timestamp }}
      uses: ./.github/actions/cfn-await
      with:
          stack-name: ${LAYER_STACK}

    - name: check status (layer)
      run: if [ ! ${{ steps.create-await-layer.outputs.stack-status }} = 'CREATE_COMPLETE' ]; then exit 1; fi

    - name: destroy (${{ matrix.target.paths[1] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[1] }}
      run: |
        yarn install && \
        cdk destroy -c timestamp=${TIMESTAMP} -f

    - name: destroy (${{ matrix.target.paths[0] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[0] }}
      run: |
        yarn install && \
        cdk destroy -c timestamp=${TIMESTAMP} -f

    - name: Awaiting completion of destroy (layer)
      id: destroy-await-layer
      env:
        LAYER_STACK: loose-linkage-lambda-layer-${{ steps.gen-timestamp.outputs.timestamp }}
      uses: ./.github/actions/cfn-await
      with:
          stack-name: ${LAYER_STACK}

    - name: check destroy status (layer)
      run: if [ ! ${{ steps.destroy-await-layer.outputs.stack-status }} = 'DELETE_COMPLETE' ]; then exit 1; fi

    - name: Awaiting completion of creation (function)
      id: destroy-await-fn
      env:
        FUNCTION_STACK: loose-linkage-lambda-layer-function-${{ steps.gen-timestamp.outputs.timestamp }}
      uses: ./.github/actions/cfn-await
      with:
          stack-name: ${FUNCTION_STACK}

    - name: check destroy status (function)
      run: if [ ! ${{ steps.destroy-await-fn.outputs.stack-status }} = 'DELETE_COMPLETE' ]; then exit 1; fi

  docker-build-multi-version:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    strategy:
      matrix:
        pattern: [
          { node: 14, os-dist: debian, app: hello-rust-lambda, image: lambda, test: true },
          { node: 16, os-dist: debian, app: hello-rust-lambda, image: lambda, test: true },
          { node: 14, os-dist: ubuntu, app: hello-rust-lambda, image: lambda, test: true },
          { node: 16, os-dist: ubuntu, app: hello-rust-lambda, image: lambda, test: true },
          { node: 14, os-dist: debian, app: simple, image: lambda-simple, test: true },
          { node: 14, os-dist: ubuntu, app: simple, image: lambda-simple, test: true }
        ]

    steps:
    - uses: actions/checkout@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}

    - name: Build (debug) lambda/container/${{ matrix.pattern.app }}/lambda ${{ matrix.pattern.node }} ${{ matrix.pattern.os-dist }}
      run: |
        docker build --rm \
          --build-arg NODE_VERSION=${{ matrix.pattern.node }} \
          --build-arg DIST=${{ matrix.pattern.os-dist }} \
          -t ${{ matrix.pattern.image }}:latest \
          lambda/container/${{ matrix.pattern.app }}/lambda

    - name: Build (release) lambda/container/${{ matrix.pattern.app }}/lambda ${{ matrix.pattern.node }} ${{ matrix.pattern.os-dist }}
      run: |
        docker build --rm \
          --build-arg NODE_VERSION=${{ matrix.pattern.node }} \
          --build-arg DIST=${{ matrix.pattern.os-dist }} \
          --target=release \
          -t ${{ matrix.pattern.image }}:release \
          lambda/container/${{ matrix.pattern.app }}/lambda

    - name: Test lambda/container/${{ matrix.pattern.app }} ${{ matrix.pattern.node }} ${{ matrix.pattern.os-dist }}
      if: ${{ matrix.pattern.test }} == true
      env:
        DOCKER_BUILDKIT: 1
        IMAGE: ${{ matrix.pattern.image }}:latest
        CONTAINER: ${{ matrix.pattern.image }}
      run: |
        if [ "${{ matrix.pattern.test }}" == "true"  ]; then
          docker run -p 9000:8080 --name ${CONTAINER} -d ${IMAGE} && \
          RESULT=$(curl -sSL -i -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}' | grep "HTTP/1.1 200" | wc -l) && \
          if [ ${RESULT} -ne 1 ]; then \
            echo ${RESULT} && \
            docker logs ${CONTAINER} && \
            exit -1;
          fi
        fi
  
  build-on-mac:
    runs-on: macos-11

    strategy:
      matrix:
        node-version: [14.x, 16.x]

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Get yarn cache directory path
        id: yarn-cache-dir-path
        run: echo "::set-output name=dir::$(yarn cache dir)"

      - uses: actions/cache@v2
        id: yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-
      
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          architecture: x64
      
      - name: generate dummy aws-exports.js
        working-directory: amplify/amplified_todo/src
        run: |
          touch aws-exports.js
          cat <<- EOF > aws-exports.js
          const awsmobile = {
              "aws_project_region": "us-west-2",
              "aws_appsync_graphqlEndpoint": "",
              "aws_appsync_region": "us-west-2",
              "aws_appsync_authenticationType": "API_KEY",
              "aws_appsync_apiKey": ""
          };
          
          export default awsmobile;
          EOS

      - name: Install node modules
        working-directory: amplify/amplified_todo/
        run: yarn install

      - name: Set Xcode version
        run: sudo xcode-select -s "/Applications/Xcode_13.2.1.app"

      - name: Show Xcode version
        run: xcodebuild -version
      - name: Configure Homebrew cache
        uses: actions/cache@v2
        with:
          path: |
            ~/Library/Caches/Homebrew/foo--*
            ~/Library/Caches/Homebrew/downloads/*--foo-*
          key: brew-${{ hashFiles('.github/brew-formulae') }}
          restore-keys: brew-

      - name: Add '--no-document' to gemrc
        run: |
          echo "install: --no-document" >> ~/.gemrc
          echo "update: --no-document" >> ~/.gemrc

      - name: Update Homebrew
        run: |
          /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
          brew update --preinstall
          cat "$(brew --repository)/Library/Taps/homebrew/homebrew-core/Formula/watchman.rb" > .github/brew-formulae
          sudo rm '/usr/local/bin/2to3'
          brew link --overwrite python@3.9
          brew upgrade

      - name: Setup watchman
        env:
          HOMEBREW_NO_AUTO_UPDATE: 1
        run: |
          brew install watchman
          sudo gem update

      - uses: ruby/setup-ruby@v1
        with:
          ruby-version: 2.6
          bundler-cache: true

      - name: Cache Pods dependencies
        uses: actions/cache@v2
        with:
          path: Pods
          key: ${{ runner.os }}-pods-${{ hashFiles('**/Podfile.lock') }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Cache Xcode archive
        uses: actions/cache@v1
        with:
          path: amplify/amplified_todo/ios/Pods
          key: ${{ runner.OS }}-archive-cache-${{ hashFiles('**/ios/amplified_todo.xcarchive') }}
          restore-keys: |
            ${{ runner.OS }}-archive-cache-

      - name: pods install
        env:
          RCT_NO_LAUNCH_PACKAGER: 1
        working-directory: amplify/amplified_todo/ios
        run: rm -rf Podfile.lock Pods && sudo gem install cocoapods && pod install

      - name: iOS app build (without export)
        if: github.actor == 'dependabot[bot]'
        env:
          RCT_NO_LAUNCH_PACKAGER: 1
        uses: devbotsxyz/xcode-build@v1
        with:
          workspace: amplify/amplified_todo/ios/amplified_todo.xcworkspace
          scheme: amplified_todo

      - name: set up JDK 11
        uses: actions/setup-java@v3
        with:
          distribution: 'zulu'
          java-version: 11

      - name: Build and test for android
        working-directory: amplify/amplified_todo/android
        run: ./gradlew assembleDebug test
