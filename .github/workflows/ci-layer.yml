# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI (Lambda Layer)

on:
  push:
    branches: [ main ]
    paths:
      - 'lambda/layer/**'
  pull_request_target:
    branches: [ main ]
    paths:
      - 'lambda/layer/**'

  workflow_dispatch:

permissions:
  actions: read
  checks: write
  contents: write
  deployments: none
  id-token: write
  issues: none
  packages: none
  pull-requests: write
  repository-projects: read
  security-events: write
  statuses: write

jobs:
  build-deploy:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [16.x]
        target: [
          { paths: [ ./lambda/layer/layer, ./lambda/layer/functions/function ] },
        ]
    steps:
    - name: generate timestamp
      id: gen-timestamp
      run: echo "timestamp=$(date +%Y%m%d-%H%M%S)" >> $GITHUB_OUTPUT

    - name: configure aws credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        role-to-assume: ${{ secrets.AWS_OIDC_ROLE_ARN }}
        role-session-name: GitHubActions
        aws-region: us-west-2

    - name: checkout
      uses: actions/checkout@v3

    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v3.5.1
      with:
        node-version: ${{ matrix.node-version }}

    - name: Setup node modules
      run: npm -g i npm yarn

    - name: cdk deploy (${{ matrix.target.paths[0] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[0] }}
      run: |
        yarn install && \
        yarn dlx aws-cdk deploy -c timestamp=${TIMESTAMP} --require-approval never

    - name: cdk deploy (${{ matrix.target.paths[1] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[1] }}
      run: |
        yarn install && \
        yarn dlx aws-cdk deploy -c timestamp=${TIMESTAMP} --require-approval never

    - name: Awaiting completion of creation (function)
      id: create-await-fn
      env:
        FUNCTION_STACK: loose-linkage-lambda-layer-function-${{ steps.gen-timestamp.outputs.timestamp }}
      run: aws cloudformation wait stack-create-complete --stack-name ${FUNCTION_STACK}
    
    - name: check status (function)
      run: if [ ! ${{ steps.create-await-fn.outputs.stack-status }} = 'CREATE_COMPLETE' ]; then exit 1; fi

    - name: Awaiting completion of creation (layer)
      id: create-await-layer
      env:
        LAYER_STACK: loose-linkage-lambda-layer-${{ steps.gen-timestamp.outputs.timestamp }}
      run: aws cloudformation wait stack-create-complete --stack-name ${LAYER_STACK}

    - name: check status (layer)
      run: if [ ! ${{ steps.create-await-layer.outputs.stack-status }} = 'CREATE_COMPLETE' ]; then exit 1; fi

    - name: destroy (${{ matrix.target.paths[1] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[1] }}
      run: |
        yarn install && \
        yarn dlx aws-cdk destroy -c timestamp=${TIMESTAMP} -f

    - name: destroy (${{ matrix.target.paths[0] }})
      env:
        TIMESTAMP: ${{ steps.gen-timestamp.outputs.timestamp }}
      working-directory: ${{ matrix.target.paths[0] }}
      run: |
        yarn install && \
        yarn dlx aws-cdk destroy -c timestamp=${TIMESTAMP} -f

    - name: Awaiting completion of creation (function)
      id: destroy-await-fn
      env:
        FUNCTION_STACK: loose-linkage-lambda-layer-function-${{ steps.gen-timestamp.outputs.timestamp }}
      run: aws cloudformation wait stack-delete-complete --stack-name ${FUNCTION_STACK}

    - name: check destroy status (function)
      run: if [ ! ${{ steps.destroy-await-fn.outputs.stack-status }} = 'DELETE_COMPLETE' ]; then exit 1; fi

    - name: Awaiting completion of destroy (layer)
      id: destroy-await-layer
      env:
        LAYER_STACK: loose-linkage-lambda-layer-${{ steps.gen-timestamp.outputs.timestamp }}
      run: aws cloudformation wait stack-delete-complete --stack-name ${LAYER_STACK}

    - name: check destroy status (layer)
      run: if [ ! ${{ steps.destroy-await-layer.outputs.stack-status }} = 'DELETE_COMPLETE' ]; then exit 1; fi
