AWSTemplateFormatVersion: '2010-09-09'

Parameters:
  InfraRepo:
    Type: String
    Default: aws-example
  InfraOwner:
    Type: String
    Default: poad
  InfraSourceBranch:
    Type: String
    Default: master
  InfraRepoOAuthToken:
    NoEcho: true
    Type: String
  AppRepo:
    Type: String
    Default: mecab-java-api-server
  AppRepoOwner:
    Type: String
    Default: poad
  AppSourceBranch:
    Type: String
    Default: master
  AppRepoOAuthToken:
    NoEcho: true
    Type: String

  JavaMajorVersion:
    Type: Number
    Default: 11
  JavaMinorRevision:
    Type: String
    Default: 0.10
  JavaBuildNumber:
    Type: String
    Default: 9
  JdkEsum:
    Type: String
    Default: ae78aa45f84642545c01e8ef786dfd700d2226f8b12881c844d6a1f71789cb99


Resources:
  CodeBuildRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        -
          Action: 
            - sts:AssumeRole
          Effect: Allow
          Principal:
            Service: 
              - codebuild.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodeBuildAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - 
                Action:
                  - s3:PutObject
                  - s3:GetBucketPolicy
                  - s3:GetObject
                  - s3:ListBucket
                Effect: Allow
                Resource: '*'
              - 
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Effect: Allow
                Resource: arn:aws:logs:*:*:*
              -
                Action:
                  - ecr:CreateRepository
                  - ecr:BatchCheckLayerAvailability
                  - ecr:CompleteLayerUpload
                  - ecr:GetAuthorizationToken
                  - ecr:InitiateLayerUpload
                  - ecr:PutImage
                  - ecr:UploadLayerPart
                Effect: Allow
                Resource: '*'
  
  ECRRepogitory:
    Type: "AWS::ECR::Repository"
    Properties:
      RepositoryName: !Ref AppRepo

  AppBuildCodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties: 
      Name: !Sub '${AppRepo}-build'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:5.0'
        PrivilegedMode: true
        EnvironmentVariables:
          -
            Name: AWS_DEFAULT_REGION
            Value: !Ref 'AWS::Region'
          -
            Name: AWS_ACCOUNT_ID
            Value: !Ref 'AWS::AccountId'
          -
            Name: IMAGE_REPO_NAME
            Value: !Ref AppRepo
          -
            Name: JAVA_BUILD_NUMBER
            Value: !Ref JavaBuildNumber
          -
            Name: JDK_ESUM
            Value: !Ref JdkEsum
          -
            Name: JAVA_MAJOR_MINOR_REVISION
            Value: !Sub '${JavaMajorVersion}.${JavaMinorRevision}'
          -
            Name: JAVA_VERSION
            Value: !Sub '${JavaMajorVersion}.${JavaMinorRevision}_${JavaBuildNumber}'
          -
            Name: JAVA_HOME
            Value: !Sub '/usr/lib/jvm/java-${JavaMajorVersion}.${JavaMinorRevision}_${JavaBuildNumber}-openjdk-amd64'
          -
            Name: JAVA_URL
            Value: !Sub 'https://github.com/AdoptOpenJDK/openjdk${JavaMajorVersion}-binaries/releases/download/jdk-${JavaMajorVersion}.${JavaMinorRevision}%2B${JavaBuildNumber}/OpenJDK11U-jdk_x64_linux_hotspot_${JavaMajorVersion}.${JavaMinorRevision}_${JavaBuildNumber}.tar.gz'
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: adoptopenjdk-jib/buildspec.yml

  AddTagCodeBuildProject:
    Type: "AWS::CodeBuild::Project"
    Properties: 
      Name: !Sub '${AppRepo}-add-tag'
      Artifacts:
        Type: CODEPIPELINE
      Environment:
        Type: LINUX_CONTAINER
        ComputeType: BUILD_GENERAL1_SMALL
        Image: 'aws/codebuild/standard:4.0'
        PrivilegedMode: true
      ServiceRole: !GetAtt CodeBuildRole.Arn
      Source:
        Type: CODEPIPELINE
        BuildSpec: !Sub |
          version: 0.2

          phases:
            install:
              runtime-versions:
                docker: 18

              commands:
                - apt-get -qq update
                - apt-get -qqy install --no-install-recommends jq

            build: 
              commands:
                - mkdir -p work
                - cd work
                - |
                  USER=$(curl -H "Authorization: token ${AppRepoOAuthToken}" https://api.github.com/user)
                - USER_ID=$(echo $USER | jq ".login")
                - EMAIL=$(echo $USER | jq ".email")
                - git config --global user.email "$EMAIL"
                - git config --global user.name "$USER_ID"
                - git clone https://${AppRepoOwner}:${AppRepoOAuthToken}@github.com/${AppRepoOwner}/${AppRepo}.git --branch ${AppSourceBranch}
                - cd ${AppRepo}
                - VERSION=$(cat $CODEBUILD_SRC_DIR_BuildResult/version.txt)
                - TAG=$VERSION-$(date +%Y%m%d.%H%M%S)
                - git tag $TAG
                - git push origin $TAG


  CodePipelineRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Statement:
        - Action: 
            - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service: 
             - codepipeline.amazonaws.com
        Version: '2012-10-17'
      Path: /
      Policies:
        - PolicyName: CodePipelinePolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              -
                Action:
                  - s3:GetObject
                  - s3:GetObjectVersion
                  - s3:GetBucketVersioning
                Effect: Allow
                Resource: '*'
              -
                Action:
                  - s3:PutObject
                Effect: Allow
                Resource: 
                  - "arn:aws:s3:::*"
              -
                Action:
                  - codepipeline:*
                  - iam:CreateRole
                  - iam:DeleteRole
                  - iam:ListRoles
                  - iam:PassRole
                  - iam:AttachRolePolicy
                  - iam:DetachRolePolicy
                  - iam:CreatePolicy
                  - iam:DeletePolicy
                  - cloudformation:Describe*
                  - cloudFormation:List*
                  - cloudformation:CreateStack
                  - cloudformation:DeleteStack
                  - cloudformation:DescribeStacks
                  - cloudformation:UpdateStack
                  - cloudformation:CreateChangeSet
                  - cloudformation:DeleteChangeSet
                  - cloudformation:DescribeChangeSet
                  - cloudformation:ExecuteChangeSet
                  - cloudformation:SetStackPolicy
                  - cloudformation:ValidateTemplate
                  - s3:ListAllMyBuckets
                  - s3:GetBucketLocation
                Effect: Allow
                Resource: '*'
              -
                Action:
                  - codebuild:BatchGetBuilds
                  - codebuild:StartBuild
                Effect: Allow
                Resource: '*'

  DockerBuildCodePipeline:
    Type: "AWS::CodePipeline::Pipeline"
    Properties:
      Name: !Sub '${AppRepo}-deploy'
      ArtifactStore: 
        Location: !Sub 'codepipeline-artifact-store-${AWS::Region}-${AWS::AccountId}'
        Type: S3
      RestartExecutionOnUpdate: false
      RoleArn: !GetAtt CodePipelineRole.Arn
      Stages:
        -
          Name: Source
          Actions: 
            -
              Name: DockerSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              InputArtifacts: []
              OutputArtifacts:
                - Name: DockerSource
              Configuration:
                Owner: !Ref InfraOwner
                Repo: !Ref InfraRepo
                Branch: !Ref InfraSourceBranch
                OAuthToken: !Ref InfraRepoOAuthToken
              RunOrder: 1
            -
              Name: AppSource
              ActionTypeId:
                Category: Source
                Owner: ThirdParty
                Provider: GitHub
                Version: 1
              InputArtifacts: []
              OutputArtifacts:
                - Name: AppSource
              Configuration:
                Owner: !Ref AppRepoOwner
                Repo: !Ref AppRepo
                Branch: !Ref AppSourceBranch
                OAuthToken: !Ref AppRepoOAuthToken
              RunOrder: 1
        -
          Name: Build
          Actions:
            - 
              Name: BuildAndPush
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: DockerSource
                - Name: AppSource
              OutputArtifacts:
                - Name: BuildResult 
              Configuration:
                ProjectName: !Ref AppBuildCodeBuildProject
                PrimarySource: DockerSource
              RunOrder: 1

        -
          Name: Finalize
          Actions:
            - 
              Name: AddTag
              ActionTypeId:
                Category: Build
                Owner: AWS
                Provider: CodeBuild
                Version: 1
              InputArtifacts:
                - Name: AppSource
                - Name: BuildResult
              Configuration:
                ProjectName: !Ref AddTagCodeBuildProject
                PrimarySource: AppSource
              RunOrder: 1

