# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

name: Node.js CI

on:
  push:
  pull_request:
    branches: [ main ]

  workflow_dispatch:

jobs:

  configure:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    steps:
    - name: Pull request auto merge enabler
      if: github.event_name == 'pull_request'
      uses: poad/github-pull-request-auto-merge-enable-action@v1.0.1
      with:
        pull_request_id: ${{ github.event.pull_request.node_id }}
        github_token: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}
        repository: ${{ github.event.repository.name }}
        owner: ${{ github.repository_owner }}
        merge_method: SQUASH

  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [12.x, 14.x, 16.x]
        target: [ ./codebuild/custom-image-test, ./lambda/cognito-console, ./lambda/cognito-lambda, ./lambda/container/simple, ./lambda/container/hello-rust-lambda, ./lambda/python, ./cognito/tiny-device-flow, ./cognito/tiny-device-flow/pages ]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm i -g yarn aws-cdk typescript
    - name: build
      env:
        BASE_PATH: /oauth/device/activate
      run: |
        cd ${{ matrix.target }} && \
        yarn install && \
        yarn build

  docker-build-multi-version:
    runs-on: ubuntu-latest
    if: github.actor != 'dependabot[bot]'
    strategy:
      matrix:
        pattern: [
          { node: 12, os-dist: debian, app: hello-rust-lambda, image: lambda, test: true },
          { node: 14, os-dist: debian, app: hello-rust-lambda, image: lambda, test: true },
          { node: 16, os-dist: debian, app: hello-rust-lambda, image: lambda, test: true },
          { node: 12, os-dist: ubuntu, app: hello-rust-lambda, image: lambda, test: true },
          { node: 14, os-dist: ubuntu, app: hello-rust-lambda, image: lambda, test: true },
          { node: 16, os-dist: ubuntu, app: hello-rust-lambda, image: lambda, test: true },

          { node: 12, os-dist: debian, app: simple, image: lambda-simple, test: true },
          { node: 14, os-dist: debian, app: simple, image: lambda-simple, test: true },
          { node: 12, os-dist: ubuntu, app: simple, image: lambda-simple, test: true },
          { node: 14, os-dist: ubuntu, app: simple, image: lambda-simple, test: true }
        ]

    steps:
    - uses: actions/checkout@v2
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}

    - name: Build (debug) lambda/container/${{ matrix.pattern.app }}/lambda ${{ matrix.pattern.node }} ${{ matrix.pattern.os-dist }}
      run: |
        docker build --rm \
          --build-arg NODE_VERSION=${{ matrix.pattern.node }} \
          --build-arg DIST=${{ matrix.pattern.os-dist }} \
          -t ${{ matrix.pattern.image }}:latest \
          lambda/container/${{ matrix.pattern.app }}/lambda

    - name: Build (release) lambda/container/${{ matrix.pattern.app }}/lambda ${{ matrix.pattern.node }} ${{ matrix.pattern.os-dist }}
      run: |
        docker build --rm \
          --build-arg NODE_VERSION=${{ matrix.pattern.node }} \
          --build-arg DIST=${{ matrix.pattern.os-dist }} \
          --target=release \
          -t ${{ matrix.pattern.image }}:release \
          lambda/container/${{ matrix.pattern.app }}/lambda

    - name: Test lambda/container/${{ matrix.pattern.app }} ${{ matrix.pattern.node }} ${{ matrix.pattern.os-dist }}
      if: ${{ matrix.pattern.test }} == true
      env:
        DOCKER_BUILDKIT: 1
        IMAGE: ${{ matrix.pattern.image }}:latest
        CONTAINER: ${{ matrix.pattern.image }}
      run: |
        if [ "${{ matrix.pattern.test }}" == "true"  ]; then
          docker run -p 9000:8080 --name ${CONTAINER} -d ${IMAGE} && \
          RESULT=$(curl -sSL -i -XPOST "http://localhost:9000/2015-03-31/functions/function/invocations" -d '{}' | grep "HTTP/1.1 200" | wc -l) && \
          if [ ${RESULT} -ne 1 ]; then \
            echo ${RESULT} && \
            docker logs ${CONTAINER} && \
            exit -1;
          fi
        fi
  
  hadolint:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        pattern: [
          { app: hello-rust-lambda, image: lambda },
          { app: simple, image: lambda-simple },
        ]

    steps:
    - uses: actions/checkout@v2
    
    - name: Login to GitHub Container Registry
      if: github.actor != 'dependabot[bot]'
      uses: docker/login-action@v1 
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner }}
        password: ${{ secrets.PERSONAL_TOKEN_FOR_GITHUB_ACTIONS }}

    - name: Build (debug) lambda/container/${{ matrix.pattern.app }}/lambda
      if: github.actor != 'dependabot[bot]'
      run: |
        docker build --rm \
          --build-arg NODE_VERSION=14 \
          --build-arg DIST=debian \
          -t ${{ matrix.pattern.image }}:latest \
          lambda/container/${{ matrix.pattern.app }}/lambda

    - name: Build (release) lambda/container/${{ matrix.pattern.app }}/lambda
      if: github.actor != 'dependabot[bot]'
      run: |
        docker build --rm \
          --build-arg NODE_VERSION=14 \
          --build-arg DIST=debian \
          --target=release \
          -t ${{ matrix.pattern.image }}:release \
          lambda/container/${{ matrix.pattern.app }}/lambda

    - name: Hadolint lambda/container/${{ matrix.pattern.app }}/lambda
      uses: hadolint/hadolint-action@v1.5.0
      with:
        dockerfile: lambda/container/${{ matrix.pattern.app }}/lambda/Dockerfile
  
  build-client:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Set up JDK 11
      uses: actions/setup-java@v2
      with:
        java-version: 11
        distribution: zulu

    - uses: actions/cache@v2
      with:
        path: |
          ~/.gradle/caches
          ~/.gradle/wrapper
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle (lambda/cognito-console/client/DeviceFlowExample)
      env:
        OAUTH_CLIENT_ID: ${{ secrets.APP_CLIENT_ID }}
        COGNITO_DOMAIN: ${{ secrets.COGNITO_DOMAIN }}
      run: |
        cd lambda/cognito-console/client/DeviceFlowExample
        rm -rf app/src/main/res/raw/example_oauth.json
        echo $(cat oauth.json.template) > app/src/main/res/raw/oauth.json
        chmod +x gradlew
        ./gradlew build

